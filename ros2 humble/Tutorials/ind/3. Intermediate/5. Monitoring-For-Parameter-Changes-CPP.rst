.. redirect-dari::

     Tutorial/Pemantauan-Untuk-Perubahan-Parameter-CPP

Memantau perubahan parameter (C++)
======================================

**Sasaran:** Belajar menggunakan kelas ParameterEventHandler untuk memantau dan merespons perubahan parameter.

**Tingkat tutorial:** Menengah

**Waktu:** 20 menit

.. isi :: Isi
    :kedalaman: 2
    :lokal:

Latar belakang
----------

Seringkali sebuah node perlu merespons perubahan parameternya sendiri atau parameter node lain.
Kelas ParameterEventHandler memudahkan untuk mendengarkan perubahan parameter sehingga kode Anda dapat meresponsnya.
Tutorial ini akan menunjukkan kepada Anda bagaimana menggunakan versi C++ dari kelas ParameterEventHandler untuk memantau perubahan parameter node sendiri serta perubahan parameter node lain.

Prasyarat
-------------

Sebelum memulai tutorial ini, Anda harus terlebih dahulu menyelesaikan tutorial berikut:

- :doc:`../Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters`
- :doc:`../Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP`

Tugas
-----

Dalam tutorial ini, Anda akan membuat paket baru untuk memuat beberapa kode contoh, menulis beberapa kode C++ untuk menggunakan kelas ParameterEventHandler, dan menguji kode yang dihasilkan.


1 Buat paket
^^^^^^^^^^^^^^^^^^^^^^

Pertama, buka terminal baru dan :doc:`sumber instalasi ROS 2 Anda <../Beginner-CLI-Tools/Configuring-ROS2-Environment>` sehingga perintah ``ros2`` akan berfungsi.

Ikuti :ref:`instruksi ini <new-directory>` untuk membuat ruang kerja baru bernama ``ros2_ws``.

Ingatlah bahwa paket harus dibuat di direktori ``src``, bukan di root ruang kerja.
Jadi, arahkan ke ``ros2_ws/src`` lalu buat paket baru di sana:

.. blok kode :: konsol

   ros2 pkg buat --build-type ament_cmake cpp_parameter_event_handler --dependencies rclcpp

Terminal Anda akan mengembalikan pesan yang memverifikasi pembuatan paket Anda ``cpp_parameter_event_handler`` dan semua file dan folder yang diperlukan.

Argumen ``--dependencies`` akan secara otomatis menambahkan baris ketergantungan yang diperlukan ke ``package.xml`` dan ``CMakeLists.txt``.

1.1 Perbarui ``package.xml``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Karena Anda menggunakan opsi ``--dependencies`` selama pembuatan paket, Anda tidak perlu menambahkan dependensi secara manual ke ``package.xml`` atau ``CMakeLists.txt``.
Namun, seperti biasa, pastikan untuk menambahkan deskripsi, nama dan email pengelola, serta informasi lisensi ke ``package.xml``.

.. blok kode :: xml

   <description>Tutorial klien peristiwa parameter C++</description>
   <maintainer email="you@email.com">Nama Anda</maintainer>
   <lisensi>Lisensi Apache 2.0</lisensi>

2 Tulis simpul C++
^^^^^^^^^^^^^^^^^^^^^^^^

Di dalam direktori ``ros2_ws/src/cpp_parameter_event_handler/src``, buat file baru bernama ``parameter_event_handler.cpp`` dan tempel kode berikut di dalamnya:

.. blok kode :: C++

     #termasuk <memori>

     #sertakan "rclcpp/rclcpp.hpp"

     kelas SampleNodeWithParameters : publik rclcpp::Node
     {
     publik:
       SampleNodeWithParameters()
       : Node("simpul_dengan_parameter")
       {
         this->declare_parameter("an_int_param", 0);

         // Buat pelanggan parameter yang dapat digunakan untuk memantau perubahan parameter
         // (untuk parameter simpul ini serta parameter simpul lainnya)
         param_subscriber_ = std::make_shared<rclcpp::ParameterEventHandler>(ini);

         // Tetapkan callback untuk parameter integer node ini, "an_int_param"
         auto cb = [ini](const rclcpp::Parameter & p) {
             RCLCPP_INFO(
               this->get_logger(), "cb: Menerima pembaruan untuk parameter \"%s\" dari tipe %s: \"%ld\"",
               p.get_name().c_str(),
               p.get_type_name().c_str(),
               p.as_int());
           };
         cb_handle_ = param_subscriber_->add_parameter_callback("an_int_param", cb);
       }

     pribadi:
       std::shared_ptr<rclcpp::ParameterEventHandler> param_subscriber_;
       std::shared_ptr<rclcpp::ParameterCallbackHandle> cb_handle_;
     };

     int main(int argc, char ** argv)
     {
       rclcpp::init(argc, argv);
       rclcpp::spin(std::make_shared<SampleNodeWithParameters>());
       rclcpp::shutdown();

       kembali 0;
     }

2.1 Periksa kodenya
~~~~~~~~~~~~~~~~~~~~~~
Pernyataan pertama, ``#include <memory>`` disertakan agar kode dapat menggunakan template std::make_shared.
Berikutnya, ``#include "rclcpp/rclcpp.hpp"`` disertakan untuk memungkinkan kode mereferensikan berbagai fungsi yang disediakan oleh antarmuka rclcpp, termasuk kelas ParameterEventHandler.

Setelah deklarasi kelas, kode mendefinisikan kelas, ``SampleNodeWithParameters``.
Konstruktor untuk kelas mendeklarasikan parameter integer ``an_int_param``, dengan nilai default 0.
Selanjutnya, kode membuat ``ParameterEventHandler`` yang akan digunakan untuk memantau perubahan parameter.
Terakhir, kode membuat fungsi lambda dan menetapkannya sebagai panggilan balik untuk dipanggil setiap kali ``an_int_param`` diperbarui.

.. catatan::

    Sangat penting untuk menyimpan pegangan yang rediputar oleh ``add_parameter_callback``; jika tidak, panggilan balik tidak akan didaftarkan dengan benar.

.. blok kode :: C++

     SampleNodeWithParameters()
     : Node("simpul_dengan_parameter")
     {
       this->declare_parameter("an_int_param", 0);

       // Buat pelanggan parameter yang dapat digunakan untuk memantau perubahan parameter
       // (untuk parameter simpul ini serta parameter simpul lainnya)
       param_subscriber_ = std::make_shared<rclcpp::ParameterEventHandler>(ini);

       // Tetapkan callback untuk parameter integer node ini, "an_int_param"
       auto cb = [ini](const rclcpp::Parameter & p) {
           RCLCPP_INFO(
             this->get_logger(), "cb: Menerima pembaruan untuk parameter \"%s\" dari tipe %s: \"%ld\"",
             p.get_name().c_str(),
             p.get_type_name().c_str(),
             p.as_int());
         };
       cb_handle_ = param_subscriber_->add_parameter_callback("an_int_param", cb);
     }

Mengikuti ``SampleNodeWithParameters`` adalah fungsi ``main`` tipikal yang menginisialisasi ROS, memutar node sampel sehingga dapat mengirim dan menerima pesan, lalu dimatikan setelah pengguna memasukkan ^C di konsol.

.. blok kode :: C++

     int main(int argc, char ** argv)
     {
       rclcpp::init(argc, argv);
       rclcpp::spin(std::make_shared<SampleNodeWithParameters>());
       rclcpp::shutdown();

       kembali 0;
     }


2.2 Tambahkan yang dapat dieksekusi
~~~~~~~~~~~~~~~~~~~~

Untuk membuat kode ini, pertama buka file ``CMakeLists.txt`` dan tambahkan baris kode berikut di bawah dependensi ``find_package(rclcpp REQUIRED)``

.. blok kode :: konsol

     add_executable(parameter_event_handler src/parameter_event_handler.cpp)
     ament_target_dependencies(parameter_event_handler rclcpp)

     instal (TARGET
       parameter_event_handler
       TUJUAN lib/${PROJECT_NAME}
     )

3 Bangun dan jalankan
^^^^^^^^^^^^^^^^^^

Merupakan praktik yang baik untuk menjalankan ``rosdep`` di root ruang kerja Anda (``ros2_ws``) untuk memeriksa dependensi yang hilang sebelum membangun:

.. tab::

    .. grup-tab :: Linux

       .. blok kode :: konsol

         rosdep install -i --from-path src --rosdistro $ROS_DISTRO -y

    .. grup-tab :: macOS

       rosdep hanya berjalan di Linux, jadi Anda dapat langsung ke langkah berikutnya.

    .. grup-tab :: Windows

       rosdep hanya berjalan di Linux, jadi Anda dapat langsung ke langkah berikutnya.

Arahkan kembali ke akar ruang kerja Anda, ``ros2_ws``, dan buat paket baru Anda:

.. blok kode :: konsol

     colcon build --packages-pilih cpp_parameter_event_handler

Buka terminal baru, arahkan ke ``ros2_ws``, dan sumber file setup:

.. tab::

   .. grup-tab :: Linux

     .. blok kode :: konsol

       . instal/setup.bash

   .. grup-tab :: macOS

     .. blok kode :: konsol

       . instal/setup.bash

   .. grup-tab :: Windows

     .. blok kode :: konsol

       panggil install/setup.bat

Sekarang jalankan node:

.. blok kode :: konsol

      ros2 jalankan cpp_parameter_event_handler parameter_event_handler

Node sekarang aktif dan memiliki satu parameter dan akan mencetak pesan setiap kali parameter ini diperbarui.
Untuk menguji ini, buka terminal lain dan sumber file pengaturan ROS seperti sebelumnya (.install/setup.bash) dan jalankan perintah berikut:

.. blok kode :: konsol

     ros2 param mengatur node_with_parameters an_int_param 43

Terminal yang menjalankan node akan menampilkan pesan yang mirip dengan berikut ini:

.. blok kode :: konsol

     [INFO] [1606950498.422461764] [node_with_parameters]: cb: Menerima pembaruan untuk parameter "an_int_param" bertipe integer: "43"

Callback yang kami atur sebelumnya di node telah dipanggil dan telah menampilkan nilai baru yang diperbarui.
Anda sekarang dapat menghentikan sampel parameter_event_handler yang sedang berjalan menggunakan ^C di terminal.

3.1 Memantau perubahan parameter node lain
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Anda juga dapat menggunakan ParameterEventHandler untuk memantau perubahan parameter ke parameter node lain.
Mari perbarui kelas SampleNodeWithParameters untuk juga memantau perubahan parameter di node lain.
Kami akan menggunakan aplikasi demo parameter_blackboard untuk menghosting parameter ganda yang akan kami pantau untuk pembaruan.

Pertama perbarui konstruktor untuk menambahkan kode berikut setelah kode yang ada:

.. blok kode :: C++

     // Sekarang, tambahkan callback untuk memantau setiap perubahan pada parameter node jarak jauh. Di dalam
     // kasus, kami memberikan nama node jarak jauh.
     auto cb2 = [ini](const rclcpp::Parameter & p) {
         RCLCPP_INFO(
           this->get_logger(), "cb2: Menerima pembaruan untuk parameter \"%s\" dengan tipe: %s: \"%.02lf\"",
           p.get_name().c_str(),
           p.get_type_name().c_str(),
           p.as_double());
       };
     auto remote_node_name = std::string("parameter_blackboard");
     nama_param_jauh otomatis = std::string("a_double_param");
     cb_handle2_ = param_subscriber_->add_parameter_callback(remote_param_name, cb2, remote_node_name);


Kemudian tambahkan variabel anggota lain, ``cb_handle2`` untuk pegangan callback tambahan:

.. blok kode :: C++

   pribadi:
     std::shared_ptr<rclcpp::ParameterEventHandler> param_subscriber_;
     std::shared_ptr<rclcpp::ParameterCallbackHandle> cb_handle_;
     std::shared_ptr<rclcpp::ParameterCallbackHandle> cb_handle2_; // Tambahkan ini
   };


Di terminal, arahkan kembali ke akar ruang kerja Anda, ``ros2_ws``, dan bangun paket yang diperbarui seperti sebelumnya:

.. blok kode :: konsol

     colcon build --packages-pilih cpp_parameter_event_handler

Kemudian sumber file setup:

.. tab::

   .. grup-tab :: Linux

     .. blok kode :: konsol

       . instal/setup.bash

   .. grup-tab :: macOS

     .. blok kode :: konsol

       . instal/setup.bash

   .. grup-tab :: Windows

     .. blok kode :: konsol

       panggil install/setup.bat

Sekarang, untuk menguji pemantauan parameter jarak jauh, pertama-tama jalankan kode parameter_event_handler yang baru dibuat:

.. blok kode :: konsol

      ros2 jalankan cpp_parameter_event_handler parameter_event_handler

Selanjutnya, dari terminal lain (dengan ROS diinisialisasi), jalankan aplikasi demo parameter_blackboard, sebagai berikut:

.. blok kode :: konsol

      ros2 jalankan demo_nodes_cpp parameter_blackboard

Terakhir, dari terminal ketiga (dengan ROS diinisialisasi), mari kita atur parameter pada node parameter_blackboard:

.. blok kode :: konsol

      ros2 param mengatur parameter_blackboard a_double_param 3.45

Setelah menjalankan perintah ini, Anda akan melihat keluaran di jendela parameter_event_handler, yang menunjukkan bahwa fungsi panggilan balik dipanggil saat pembaruan parameter:

.. blok kode :: konsol

     [INFO] [1606952588.237531933] [node_with_parameters]: cb2: Menerima pembaruan untuk parameter "a_double_param" tipe: double: "3.45"

Ringkasan
-------

Anda membuat node dengan parameter dan menggunakan kelas ParameterEventHandler untuk menyetel callback guna memantau perubahan pada parameter tersebut.
Anda juga menggunakan kelas yang sama untuk memantau perubahan pada node jarak jauh.
ParameterEventHandler adalah cara mudah untuk memantau perubahan parameter sehingga Anda kemudian dapat merespons nilai yang diperbarui.

Konten terkait
---------------

Untuk mempelajari cara menyesuaikan file parameter ROS 1 untuk ROS 2, lihat :doc:`Migrasi file parameter YAML dari ROS 1 ke ROS2 <../../How-To-Guides/Parameters-YAML-files-migration-guide >' tutorial.