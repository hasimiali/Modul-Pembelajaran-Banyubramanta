.. redirect-dari::

     Tutorial/Rosdep

.. _rosdep:

Mengelola Ketergantungan dengan rosdep
=================================

**Sasaran:** Kelola dependensi eksternal menggunakan ``rosdep``.

**Tingkat tutorial:** Menengah

**Waktu:** 5 menit

.. isi :: Isi
    :kedalaman: 2
    :lokal:

Pengarang: Steve Macenski

Tutorial ini akan menjelaskan cara mengelola dependensi eksternal menggunakan ``rosdep``.

Apa itu rosdep?
---------------

``rosdep`` adalah utilitas manajemen ketergantungan ROS yang dapat bekerja dengan paket ROS dan pustaka eksternal.
``rosdep`` adalah utilitas baris perintah untuk mengidentifikasi dan menginstal dependensi untuk membangun atau menginstal sebuah paket.
Itu dapat atau dipanggil ketika:

- Membangun ruang kerja dan membutuhkan dependensi yang sesuai untuk membangun paket di dalamnya
- Instal paket (misalnya ``sudo apt install ros-{DISTRO}-demo-nodes-cpp``) untuk memeriksa dependensi yang diperlukan agar dapat dijalankan
- dan banyak lagi!

Ini memiliki kemampuan untuk bekerja pada satu paket atau pada direktori paket (mis. ruang kerja).

Sedikit tentang file package.xml
--------------------------------

File ``package.xml`` paket berisi sekumpulan dependensi.
Dependensi dalam file ini umumnya disebut sebagai "kunci rosdep".
Ini diwakili dalam tag ``<depend>``, ``<test_depend>``, ``<exec_depend>``, ``<build_depend>``, dan ``<build_export_depend>``.
Mereka menentukan dalam situasi apa masing-masing dependensi diperlukan.

- Untuk dependensi yang hanya digunakan dalam pengujian kode (mis. ``gtest``), gunakan ``test_depend``.
- Untuk dependensi yang hanya digunakan dalam membuat kode, gunakan ``build_depend``.
- Untuk dependensi yang dibutuhkan oleh header yang mengekspor kode, gunakan ``build_export_depend``.
- Untuk dependensi yang hanya digunakan saat menjalankan kode, gunakan ``exec_depend``.
- Untuk tujuan campuran, gunakan ``depend``, yang mencakup dependensi build, ekspor, dan waktu eksekusi.

Ketergantungan ini diisi secara manual dalam file ``package.xml`` oleh pembuat paket dan harus berupa daftar lengkap pustaka dan paket non-builtin yang diperlukan.

Bagaimana cara kerja rosdep?
---------------------

``rosdep`` akan memeriksa file ``package.xml`` di jalurnya atau untuk paket tertentu dan menemukan kunci rosdep yang tersimpan di dalamnya.
Kunci-kunci ini kemudian dirujuk silang dengan indeks pusat untuk menemukan paket ROS atau pustaka perangkat lunak yang sesuai di berbagai manajer paket.
Akhirnya, setelah paket ditemukan, mereka diinstal dan siap digunakan!

Indeks pusat dikenal sebagai ``rosdistro``, yang `dapat ditemukan di sini <https://github.com/ros/rosdistro>`_.
Kami akan menjelajahinya lebih lanjut di bagian selanjutnya.

Bagaimana saya tahu kunci apa yang harus dimasukkan ke dalam package.xml saya?
-------------------------------------------------

Pertanyaan bagus, saya senang Anda bertanya!

Untuk paket ROS (mis. ``nav2_bt_navigator``), Anda cukup menempatkan nama paket.
Anda dapat menemukan daftar semua paket ROS yang dirilis di ``rosdistro`` di ``<distro>/distribution.yaml`` untuk distribusi ROS yang Anda berikan.

Untuk dependensi sistem paket non-ROS, kita perlu menemukan kunci untuk pustaka tertentu.
Secara umum, ada dua file yang menarik: ``rosdep/base.yaml`` dan ``rosdep/python.yaml``.
``base.yaml`` secara umum berisi dependensi sistem ``apt``.
``python.yaml`` secara umum berisi dependensi ``pip`` python.

Untuk menemukan kunci, cari perpustakaan Anda di file ini dan temukan nama di ``yaml`` yang memuatnya.
Ini adalah kunci untuk memasukkan file ``package.xml``.

Misalnya, bayangkan sebuah paket memiliki ketergantungan pada ``doxygen`` karena itu adalah perangkat lunak hebat yang memperhatikan dokumentasi kualitas (petunjuk petunjuk).
Kita akan mencari ``base.yaml`` untuk ``doxygen`` dan menemukan:

.. blok kode :: yaml

   doksigen:
     lengkungan: [doksigen]
     debian: [doksigen]
     fedora: [doksigen]
     freebsd: [doksigen]
     gentoo: [app-doc/doksigen]
     macports: [doksigen]
     nixos: [doksigen]
     openembedded: [doxygen@meta-oe]
     openuse: [doksigen]
     rhel: [doksigen]
     ubuntu: [doksigen]

Itu berarti kunci rosdep kita adalah ``doxygen``, yang akan menyelesaikan ke berbagai nama tersebut di manajer paket sistem operasi yang berbeda untuk penginstalan.

Bagaimana jika perpustakaan saya tidak ada di rosdistro?
--------------------------------------

Jika perpustakaan Anda tidak ada di ``rosdistro``, Anda dapat merasakan kehebatan pengembangan perangkat lunak sumber terbuka: Anda dapat menambahkannya sendiri!
Permintaan tarik untuk rosdistro biasanya digabungkan dengan baik dalam waktu seminggu.

`Petunjuk terperinci dapat ditemukan di sini <https://github.com/ros/rosdistro/blob/master/CONTRIBUTING.md#rosdep-rules-contributions>`_ untuk cara menyumbangkan kunci rosdep baru.
Jika karena alasan tertentu ini tidak dapat dikontribusikan secara terbuka, dimungkinkan untuk melakukan fork rosdistro dan memelihara indeks alternatif untuk digunakan.


Bagaimana cara menggunakan alat rosdep?
-----------------------------

Sekarang setelah kita memiliki pemahaman tentang ``rosdep``, ``package.xml``, dan ``rosdistro``, kita siap menggunakan utilitas itu sendiri!
Pertama, jika ini adalah pertama kalinya menggunakan ``rosdep``, ini harus diinisialisasi melalui:

.. blok kode :: bash

     sudo rosdep init
     rosdep update

Ini akan menginisialisasi rosdep dan ``update`` akan memperbarui indeks rosdistro yang di-cache secara lokal.
Merupakan ide bagus untuk ``memperbarui`` rosdep sesekali untuk mendapatkan indeks terbaru.

Terakhir, kita dapat menjalankan ``rosdep install`` untuk menginstal dependensi.
Biasanya, ini dijalankan di ruang kerja dengan banyak paket dalam satu panggilan untuk menginstal semua dependensi.
Panggilan untuk itu akan muncul sebagai berikut, jika di root ruang kerja dengan direktori ``src`` yang berisi kode sumber.

.. blok kode :: bash

     rosdep instal --from-paths src -y --ignore-src

Memecah itu:

- ``--from-paths src`` menentukan jalur untuk memeriksa file ``package.xml`` untuk menyelesaikan kunci
- ``-y`` berarti default ya untuk semua petunjuk dari manajer paket untuk menginstal tanpa petunjuk
- ``--ignore-src`` berarti mengabaikan penginstalan dependensi, meskipun ada kunci rosdep, jika paket itu sendiri juga ada di ruang kerja.

Ada argumen dan opsi tambahan yang tersedia.
Gunakan ``rosdep -h`` untuk melihatnya.