.. redirect-dari::

     Komposisi
     Tutorial/Komposisi

Menyusun beberapa node dalam satu proses
========================================

.. isi :: Daftar Isi
    :kedalaman: 2
    :lokal:

**Sasaran:** Buat beberapa node menjadi satu proses.

**Tingkat tutorial:** Menengah

**Waktu:** 20 menit

Latar belakang
----------

Lihat :doc:`artikel konseptual <../../Concepts/Intermediate/About-Composition>`.

Jalankan demo
-------------

Demo menggunakan executable dari `rclcpp_components <https://github.com/ros2/rclcpp/tree/{REPOS_FILE_BRANCH}/rclcpp_components>`__, `ros2component <https://github.com/ros2/ros2cli/tree/{REPOS_FILE_BRANCH }/ros2component>`__, dan paket `composition <https://github.com/ros2/demos/tree/{REPOS_FILE_BRANCH}/composition>`__, dan dapat dijalankan dengan perintah berikut.


Temukan komponen yang tersedia
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Untuk melihat komponen apa saja yang terdaftar dan tersedia di ruang kerja, jalankan perintah berikut di shell:

.. blok kode :: bash

    jenis komponen ros2

Terminal akan mengembalikan daftar semua komponen yang tersedia:

.. blok kode :: bash

    (... komponen paket lain di sini)
    komposisi
      komposisi::Pembicara
      komposisi::Pendengar
      komposisi::NodeLikeListener
      komposisi::Server
      komposisi::Klien
    (... komponen paket lain di sini)


Komposisi run-time menggunakan layanan ROS dengan penerbit dan pelanggan
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^

Di Shell pertama, mulai wadah komponen:

.. blok kode :: bash

    ros2 jalankan rclcpp_components component_container

Buka shell kedua dan verifikasi bahwa container berjalan melalui alat baris perintah ``ros2``:

.. blok kode :: bash

    daftar komponen ros2

Anda akan melihat nama komponen:

.. blok kode :: bash

    / Pengelola Komponen

Di shell kedua muat komponen pembicara (lihat `pembicara <https://github.com/ros2/demos/blob/{REPOS_FILE_BRANCH}/composition/src/talker_component.cpp>`__ kode sumber):

.. blok kode :: bash

    ros2 memuat komponen / Komposisi Komposisi Pengelola Komponen :: Pembicara

Perintah akan mengembalikan ID unik dari komponen yang dimuat serta nama node:

.. blok kode :: bash

    Memuat komponen 1 ke node kontainer '/ComponentManager' sebagai '/ pembicara'

Sekarang shell pertama akan menampilkan pesan bahwa komponen telah dimuat serta pesan berulang untuk menerbitkan pesan.

Jalankan perintah lain di shell kedua untuk memuat komponen pendengar (lihat `listener <https://github.com/ros2/demos/blob/{REPOS_FILE_BRANCH}/composition/src/listener_component.cpp>`__ kode sumber):

.. blok kode :: bash

    ros2 memuat komponen /ComponentManager komposisi komposisi::Listener

Terminal akan mengembalikan:

.. blok kode :: bash

    Memuat komponen 2 ke node kontainer '/ComponentManager' sebagai '/listener'

Utilitas baris perintah ``ros2`` kini dapat digunakan untuk memeriksa status wadah:

.. blok kode :: bash

    daftar komponen ros2

Anda akan melihat hasil berikut:

.. blok kode :: bash

    / Pengelola Komponen
       1 /pembicara
       2 /pendengar

Sekarang shell pertama akan menampilkan keluaran berulang untuk setiap pesan yang diterima.

Komposisi run-time menggunakan layanan ROS dengan server dan klien
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^

Contoh dengan server dan klien sangat mirip.

Di cangkang pertama:

.. blok kode :: bash

    ros2 jalankan rclcpp_components component_container

Di shell kedua (lihat `server <https://github.com/ros2/demos/blob/{REPOS_FILE_BRANCH}/composition/src/server_component.cpp>`__ dan `client <https://github.com/ros2 /demos/blob/{REPOS_FILE_BRANCH}/composition/src/client_component.cpp>`__ kode sumber):

.. blok kode :: bash

    ros2 memuat komponen /ComponentManager komposisi komposisi::Server
    ros2 beban komponen /komposisi Komposisi Pengelola Komponen::Klien

Dalam hal ini klien mengirim permintaan ke server, server memproses permintaan dan membalas dengan respons, dan klien mencetak respons yang diterima.

Komposisi waktu kompilasi menggunakan layanan ROS
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Demo ini menunjukkan bahwa shared library yang sama dapat digunakan kembali untuk mengkompilasi sebuah executable tunggal yang menjalankan beberapa komponen.
Eksekusi berisi keempat komponen dari atas: pembicara dan pendengar serta server dan klien.

Dalam panggilan shell (lihat `kode sumber <https://github.com/ros2/demos/blob/{REPOS_FILE_BRANCH}/composition/src/manual_composition.cpp>`__):

.. blok kode :: bash

    ros2 jalankan komposisi manual_composition

Ini harus menampilkan pesan berulang dari kedua pasangan, pembicara dan pendengar serta server dan klien.

.. catatan::

    Komponen yang disusun secara manual tidak akan tercermin dalam keluaran alat baris perintah ``ros2 component list``.

Komposisi run-time menggunakan dlopen
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Demo ini menyajikan alternatif untuk komposisi run-time dengan membuat proses kontainer generik dan exsecara plisit meneruskan perpustakaan untuk memuat tanpa menggunakan antarmuka ROS.
Proses ini akan membuka setiap perpustakaan dan membuat satu instance dari setiap kelas "rclcpp::Node" di perpustakaan `kode sumber <https://github.com/ros2/demos/blob/{REPOS_FILE_BRANCH}/composition/src/dlopen_composition. cpp>`__).

.. tab::

   .. grup-tab :: Linux

     .. blok kode :: bash

        ros2 jalankan komposisi dlopen_composition `ros2 komposisi awalan pkg`/lib/libtalker_component.so `ros2 komposisi awalan pkg`/lib/liblistener_component.so

   .. grup-tab :: macOS

     .. blok kode :: bash

        ros2 jalankan komposisi dlopen_composition `ros2 pkg prefix composition`/lib/libtalker_component.dylib `ros2 pkg prefix composition`/lib/liblistener_component.dylib

   .. grup-tab :: Windows

     .. blok kode :: bash

        > komposisi awalan ros2 pkg

     untuk mendapatkan jalur ke tempat komposisi dipasang. Lalu telepon

     .. blok kode :: bash

        > ros2 jalankan komposisi dlopen_composition <path_to_composition_install>\bin\talker_component.dll <path_to_composition_install>\bin\listener_component.dll

Sekarang shell akan menampilkan keluaran berulang untuk setiap pesan yang dikirim dan diterima.

.. catatan::

    komponen yang disusun dlopen tidak akan tercermin dalam keluaran alat baris perintah ``ros2 component list``.


Komposisi menggunakan tindakan peluncuran
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Meskipun alat baris perintah berguna untuk men-debug dan mendiagnosis konfigurasi komponen, seringkali lebih nyaman untuk memulai rangkaian komponen pada saat yang bersamaan.
Untuk mengotomatiskan tindakan ini, kita dapat menggunakan `launch file <https://github.com/ros2/demos/blob/{REPOS_FILE_BRANCH}/composition/launch/composition_demo_launch.py>`__:

.. blok kode :: bash

    ros2 meluncurkan komposisi komposisi_demo_launch.py


Topik Lanjutan
---------------

Sekarang setelah kita melihat operasi dasar komponen, kita dapat membahas beberapa topik lebih lanjut.


Bongkar komponen
^^^^^^^^^^^^^^^^^^^^^^^^

Di Shell pertama, mulai wadah komponen:

.. blok kode :: bash

    ros2 jalankan rclcpp_components component_container

Verifikasi bahwa penampung berjalan melalui alat baris perintah ``ros2``:

.. blok kode :: bash

    daftar komponen ros2

Anda akan melihat nama komponen:

.. blok kode :: bash

    / Pengelola Komponen

Di shell kedua muat pembicara dan pendengar seperti yang kita miliki sebelumnya:

.. blok kode :: bash

    ros2 memuat komponen / Komposisi Komposisi Pengelola Komponen :: Pembicara
    ros2 memuat komponen /ComponentManager komposisi komposisi::Listener

Gunakan ID unik untuk membongkar node dari wadah komponen.

.. blok kode :: bash

    membongkar komponen ros2 /ComponentManager 1 2

Terminal harus mengembalikan:

.. blok kode :: bash

    Komponen 1 dibongkar dari wadah '/ComponentManager'
    Komponen 2 dibongkar dari wadah '/ComponentManager'

Di shell pertama, verifikasi bahwa pesan berulang dari pembicara dan pendengar telah berhenti.


Memetakan ulang nama container dan namespace
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Nama dan namespace pengelola komponen dapat dipetakan ulang melalui argumen baris perintah standar:

.. blok kode :: bash

    ros2 jalankan rclcpp_components component_container --ros-args -r __node:=MyContainer -r __ns:=/ns

Di shell kedua, komponen dapat dimuat dengan menggunakan nama wadah yang diperbarui:

.. blok kode :: bash

    komponen ros2 memuat /ns/MyContainer komposisi komposisi::Listener

.. catatan::

    Pemetaan ulang ruang nama wadah tidak memengaruhi komponen yang dimuat.


Remap nama komponen dan ruang nama
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Nama komponen dan ruang nama dapat disesuaikan melalui argumen ke perintah load.

Di Shell pertama, mulai wadah komponen:

.. blok kode :: bash

    ros2 jalankan rclcpp_components component_container


Beberapa contoh cara memetakan ulang nama dan ruang nama.

Remap nama node:

.. blok kode :: bash

    ros2 memuat komponen /ComponentManager komposisi komposisi::Talker --node-name talker2

Petakan ulang ruang nama:

.. blok kode :: bash

    ros2 memuat komponen /ComponentManager komposisi komposisi::Talker --node-namespace /ns

Petakan ulang keduanya:

.. blok kode :: bash

    komponen ros2 memuat komposisi komposisi /ComponentManager :: Talker --node-name talker3 --node-namespace /ns2

Sekarang gunakan utilitas baris perintah ``ros2``:

.. blok kode :: bash

    daftar komponen ros2

Di konsol Anda akan melihat entri yang sesuai:

.. blok kode :: bash

    / Pengelola Komponen
       1 /pembicara2
       2 /ns/pembicara
       3 /ns2/pembicara3

.. catatan::

    Pemetaan ulang ruang nama wadah tidak memengaruhi komponen yang dimuat.

Melewati nilai parameter ke dalam komponen
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Baris perintah ``ros2 component load`` mendukung penerusan parameter arbitrer ke node saat node dibuat.
Fungsi ini dapat digunakan sebagai berikut:

.. blok kode :: bash

    ros2 memuat komponen /ComponentManager image_tools image_tools::Cam2Image -p burger_mode:=true

Melewati argumen tambahan ke dalam komponen
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Baris perintah ``ros2 component load`` mendukung penerusan opsi tertentu ke manajer komponen untuk digunakan saat membangun node.
Saat ini, satu-satunya opsi baris perintah yang didukung adalah membuat instance node menggunakan komunikasi intra-proses.
Fungsi ini dapat digunakan sebagai berikut:

.. blok kode :: bash

    ros2 memuat komponen komposisi komposisi /ComponentManager :: Talker -e use_intra_process_comms: = true

Node yang dapat disusun sebagai library bersama
------------------------------------

Jika Anda ingin mengekspor node yang dapat disusun sebagai library bersama dari sebuah paket dan menggunakan node tersebut dalam paket lain yang melakukan komposisi link-time, tambahkan kode ke file CMake yang mengimpor target aktual dalam paket downstream.

Kemudian instal file yang dihasilkan dan ekspor file yang dihasilkan.

Contoh praktis dapat dilihat di sini: `ROS Discourse - Ament best practice for sharing library <https://discourse.ros.org/t/ament-best-practice-for-sharing-libraries/3602>`__

Menyusun Komponen Turunan Non-Node
-------------------------------------

Di ROS 2, komponen memungkinkan penggunaan sumber daya sistem yang lebih efisien dan menyediakan fitur canggih yang memungkinkan Anda membuat fungsionalitas yang dapat digunakan kembali yang tidak terikat ke node tertentu.

Salah satu keuntungan menggunakan komponen adalah mereka memungkinkan Anda untuk membuat fungsionalitas turunan non-node sebagai executable mandiri atau pustaka bersama yang dapat dimuat ke sistem ROS sesuai kebutuhan.

Untuk membuat komponen yang tidak diturunkan dari node, ikuti panduan berikut:

1. Implementasikan konstruktor yang menggunakan ``const rclcpp::NodeOptions&`` sebagai argumennya.
2. Implementasikan metode ``get_node_base_interface()``, yang akan mengembalikan ``NodeBaseInterface::SharedPtr``. Anda dapat menggunakan metode ``get_node_base_interface()`` dari node yang Anda buat di konstruktor untuk menyediakan antarmuka ini.

Berikut adalah contoh komponen yang tidak diturunkan dari node, yang mendengarkan topik ROS: `node_like_listener_component <https://github.com/ros2/demos/blob/{REPOS_FILE_BRANCH}/composition/src/node_like_listener_component.cpp> `__.

Untuk informasi selengkapnya tentang topik ini, Anda dapat merujuk ke `diskusi <https://github.com/ros2/rclcpp/issues/2110#issuecomment-1454228192>`__ ini.