.. _CustomInterfaces:

Membuat file msg dan srv khusus
=================================

**Sasaran:** Menentukan file antarmuka khusus (``.msg`` dan ``.srv``) dan menggunakannya dengan node Python dan C++.

**Tingkat tutorial:** Pemula

**Waktu:** 20 menit

.. isi :: Isi
    :kedalaman: 2
    :lokal:

Latar belakang
----------

Dalam tutorial sebelumnya, Anda menggunakan antarmuka pesan dan layanan untuk mempelajari tentang :doc:`topics <../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics>`, :doc:`services <../ Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services>`, dan penerbit/pelanggan sederhana (:doc:`C++ <./Writing-A-Simple-Cpp-Publisher-And-Subscriber>`/ :doc:`Python<./Writing-A-Simple-Py-Publisher-And-Subscriber>`) dan layanan/klien (:doc:`C++ <./Writing-A-Simple-Cpp-Service-And-Client >`/:doc:`Python<./Writing-A-Simple-Py-Service-And-Client>`) node.
Antarmuka yang Anda gunakan sudah ditentukan sebelumnya dalam kasus tersebut.

Meskipun merupakan praktik yang baik untuk menggunakan definisi antarmuka yang telah ditentukan sebelumnya, terkadang Anda juga perlu menentukan pesan dan layanan Anda sendiri.
Tutorial ini akan memperkenalkan Anda pada metode paling sederhana untuk membuat definisi antarmuka khusus.

Prasyarat
-------------

Anda harus memiliki :doc:`ROS 2 workspace <./Creating-A-Workspace/Creating-A-Workspace>`.

Tutorial ini juga menggunakan paket yang dibuat di penerbit/pelanggan (:doc:`C++ <./Writing-A-Simple-Cpp-Publisher-And-Subscriber>` dan :doc:`Python<./Writing-A-Simple -Py-Publisher-And-Subscriber>`) dan layanan/klien (:doc:`C++ <./Writing-A-Simple-Cpp-Service-And-Client>` dan :doc:`Python<./Writing- A-Simple-Py-Service-And-Client>`) tutorial untuk mencoba pesan kustom baru.

Tugas
-----

1 Buat paket baru
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Untuk tutorial ini Anda akan membuat file ``.msg`` dan ``.srv`` kustom dalam paket mereka sendiri, dan kemudian menggunakannya dalam paket terpisah.
Kedua paket harus berada di ruang kerja yang sama.

Karena kita akan menggunakan paket pub/sub dan layanan/klien yang dibuat di tutorial sebelumnya, pastikan Anda berada di ruang kerja yang sama dengan paket tersebut (``ros2_ws/src``), lalu jalankan perintah berikut untuk membuat paket baru :

.. blok kode :: konsol

   ros2 pkg buat --build-type ament_cmake tutorial_interfaces

``tutorial_interfaces`` adalah nama paket baru.
Perhatikan bahwa ini adalah, dan hanya bisa berupa, paket CMake, tetapi ini tidak membatasi jenis paket mana yang dapat Anda gunakan untuk pesan dan layanan Anda.
Anda dapat membuat antarmuka khusus Anda sendiri dalam paket CMake, lalu menggunakannya dalam node C++ atau Python, yang akan dibahas di bagian terakhir.

File ``.msg`` dan ``.srv`` harus ditempatkan di direktori masing-masing bernama ``msg`` dan ``srv``.
Buat direktori di ``ros2_ws/src/tutorial_interfaces``:

.. blok kode :: konsol

   mkdir msg srv

2 Buat definisi kustom
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

2.1 definisi pesan
~~~~~~~~~~~~~~~~~~~~

Di direktori ``tutorial_interfaces/msg`` yang baru saja Anda buat, buat file baru bernama ``Num.msg`` dengan satu baris kode yang mendeklarasikan struktur datanya:

.. blok kode :: konsol

     int64 nomor

Ini adalah pesan khusus yang mentransfer bilangan bulat 64-bit tunggal yang disebut ``num``.

Juga di direktori ``tutorial_interfaces/msg`` yang baru saja Anda buat, buat file baru bernama ``Sphere.msg`` dengan konten berikut:

.. blok kode :: konsol

     geometri_msgs/Pusat titik
     radius float64

Pesan khusus ini menggunakan pesan dari paket pesan lain (``geometry_msgs/Point`` dalam kasus ini).

2.2 definisi srv
~~~~~~~~~~~~~~~~~~~~

Kembali ke direktori ``tutorial_interfaces/srv`` yang baru saja Anda buat, buat file baru bernama ``AddThreeInts.srv`` dengan struktur permintaan dan respons berikut:

.. blok kode :: konsol

   int64 a
   int64b
   int64 c
   ---
   jumlah int64

Ini adalah layanan khusus Anda yang meminta tiga bilangan bulat bernama ``a``, ``b``, dan ``c``, dan merespons dengan bilangan bulat bernama ``sum``.

3 ``CMakeLists.txt``
^^^^^^^^^^^^^^^^^^^^^^^^

Untuk mengonversi antarmuka yang Anda definisikan menjadi kode khusus bahasa (seperti C++ dan Python) sehingga dapat digunakan dalam bahasa tersebut, tambahkan baris berikut ke ``CMakeLists.txt``:

.. blok kode :: cmake

   find_package(geometry_msgs DIPERLUKAN)
   find_package(rosidl_default_generator DIPERLUKAN)

   rosidl_generate_interfaces(${PROJECT_NAME}
     "msg/Num.msg"
     "pesan/Sphere.msg"
     "srv/AddThreeInts.srv"
     DEPENDENCIES geometry_msgs # Tambahkan paket yang bergantung pada pesan di atas, dalam hal ini geometry_msgs untuk Sphere.msg
   )

.. catatan::

   Argumen pertama (nama perpustakaan) di rosidl_generate_interfaces harus cocok dengan ${PROJECT_NAME} (lihat https://github.com/ros2/rosidl/issues/441#issuecomment-591025515).

4 ``paket.xml``
^^^^^^^^^^^^^^^^^^^^

Karena antarmuka bergantung pada ``rosidl_default_generators`` untuk membuat kode khusus bahasa, Anda perlu mendeklarasikan dependensi alat build padanya.
``rosidl_default_runtime`` adalah dependensi runtime atau tahap eksekusi, diperlukan untuk dapat menggunakan antarmuka nanti.
The ``rosidl_inter