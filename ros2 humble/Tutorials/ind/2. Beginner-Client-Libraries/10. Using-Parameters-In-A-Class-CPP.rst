.. redirect-dari::

     Tutorial/Menggunakan-Parameter-Dalam-Kelas-CPP

.. _CppParamNode:

Menggunakan parameter di kelas (C++)
=================================

**Sasaran:** Membuat dan menjalankan kelas dengan parameter ROS menggunakan C++.

**Tingkat tutorial:** Pemula

**Waktu:** 20 menit

.. isi :: Isi
    :kedalaman: 2
    :lokal:

Latar belakang
----------

Saat membuat :doc:`nodes <../Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` Anda sendiri terkadang Anda perlu menambahkan parameter yang dapat diatur dari file peluncuran.

Tutorial ini akan menunjukkan cara membuat parameter tersebut di kelas C++, dan cara mengaturnya di file peluncuran.

Prasyarat
-------------

Dalam tutorial sebelumnya, Anda telah mempelajari cara :doc:`membuat ruang kerja <./Creating-A-Workspace/Creating-A-Workspace>` dan :doc:`membuat paket <./Creating-Your-First-ROS2- Paket>`.
Anda juga telah mempelajari tentang :doc:`parameters <../Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters>` dan fungsinya dalam sistem ROS 2.

Tugas
-----

1 Buat paket
^^^^^^^^^^^^^^^^^^^^^^

Buka terminal baru dan :doc:`sumber instalasi ROS 2 Anda <../Beginner-CLI-Tools/Configuring-ROS2-Environment>` sehingga perintah ``ros2`` akan berfungsi.

Ikuti :ref:`instruksi ini <new-directory>` untuk membuat ruang kerja baru bernama ``ros2_ws``.

Ingatlah bahwa paket harus dibuat di direktori ``src``, bukan di root ruang kerja.
Arahkan ke ``ros2_ws/src`` dan buat paket baru:

.. blok kode :: konsol

   ros2 pkg buat --build-type ament_cmake cpp_parameters --dependencies rclcpp

Terminal Anda akan mengembalikan pesan yang memverifikasi pembuatan paket Anda ``cpp_parameters`` dan semua file dan folder yang diperlukan.

Argumen ``--dependencies`` akan secara otomatis menambahkan baris ketergantungan yang diperlukan ke ``package.xml`` dan ``CMakeLists.txt``.

1.1 Perbarui ``package.xml``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Karena Anda menggunakan opsi ``--dependencies`` selama pembuatan paket, Anda tidak perlu menambahkan dependensi secara manual ke ``package.xml`` atau ``CMakeLists.txt``.

Namun, seperti biasa, pastikan untuk menambahkan deskripsi, nama dan email pengelola, serta informasi lisensi ke ``package.xml``.

.. blok kode :: xml

   <description>Tutorial parameter C++</description>
   <maintainer email="you@email.com">Nama Anda</maintainer>
   <lisensi>Lisensi Apache 2.0</lisensi>

2 Tulis simpul C++
^^^^^^^^^^^^^^^^^^^^^^^^

Di dalam direktori ``ros2_ws/src/cpp_parameters/src``, buat file baru bernama ``cpp_parameters_node.cpp`` dan tempel kode berikut di dalamnya:

.. blok kode :: C++

     #termasuk <chrono>
     #termasuk <fungsional>
     #sertakan <string>

     #sertakan <rclcpp/rclcpp.hpp>

     menggunakan namespace std::chrono_literals;

     kelas MinimalParam : publik rclcpp::Node
     {
     publik:
       MinimalParam()
       : Node("minimal_param_node")
       {
         this->declare_parameter("parameter_saya", "dunia");

         timer_ = ini->buat_wall_timer(
           1000ms, std::bind(&MinimalParam::timer_callback, ini));
       }

       batal timer_callback()
       {
         std::string my_param = this->get_parameter("my_parameter").as_string();

         RCLCPP_INFO(ini->get_logger(), "Halo %s!", my_param.c_str());

         std::vector<rclcpp::Parameter> all_new_parameters{rclcpp::Parameter("parameter_saya", "dunia")};
         this->set_parameters(all_new_parameters);
       }

     pribadi:
       rclcpp::TimerBase::SharedPtr timer_;
     };

     int main(int argc, char ** argv)
     {
       rclcpp::init(argc, argv);
       rclcpp::spin(std::make_shared<MinimalParam>());
       rclcpp::shutdown();
       kembali 0;
     }

2.1 Periksa kodenya
~~~~~~~~~~~~~~~~~~~~~~
Pernyataan ``#include`` di atas adalah dependensi paket.

Potongan kode selanjutnya membuat kelas dan konstruktor.
Baris pertama konstruktor ini membuat parameter dengan nama ``my_parameter`` dan nilai default ``world``.
Tipe parameter disimpulkan dari nilai default, jadi dalam hal ini akan diatur ke tipe string.
Selanjutnya ``timer_`` diinisialisasi dengan periode 1000ms, yang menyebabkan fungsi ``timer_callback`` dijalankan sekali dalam satu detik.

.. blok kode :: C++

     kelas MinimalParam : publik rclcpp::Node
     {
     publik:
       MinimalParam()
       : Node("minimal_param_node")
       {
         this->declare_parameter("parameter_saya", "dunia");

         timer_ = ini->buat_wall_timer(
           1000ms, std::bind(&MinimalParam::timer_callback, ini));
       }

Baris pertama dari fungsi ``timer_callback`` kita mendapatkan parameter ``my_parameter`` dari node, dan menyimpannya di ``my_param``.
Selanjutnya fungsi ``RCLCPP_INFO`` memastikan peristiwa dicatat.
Fungsi ``set_parameters`` kemudian menyetel parameter ``my_parameter`` kembali ke nilai string default ``world``.
Jika pengguna mengubah parameter secara eksternal, ini memastikannya selalu diatur ulang kembali ke aslinya.

.. blok kode :: C++

     batal timer_callback()
     {
       std::string my_param = ini->get_pa