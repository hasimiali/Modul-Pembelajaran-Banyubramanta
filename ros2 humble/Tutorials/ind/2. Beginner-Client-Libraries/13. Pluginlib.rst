.. redirect-dari::

     Tutorial/Pluginlib

Membuat dan menggunakan plugin (C++)
================================

**Sasaran:** Belajar membuat dan memuat plugin sederhana menggunakan pluginlib.

**Tingkat tutorial:** Pemula

**Waktu:** 20 menit

.. isi :: Isi
    :kedalaman: 3
    :lokal:

Latar belakang
----------

Tutorial ini berasal dari `<http://wiki.ros.org/pluginlib>`_ dan `Tutorial Menulis dan Menggunakan Plugin Sederhana <http://wiki.ros.org/pluginlib/Tutorials/Writing%20and%20Using %20a%20Simple%20Plugin>`_.

pluginlib adalah pustaka C++ untuk memuat dan membongkar plugin dari dalam paket ROS.
Plugin adalah kelas yang dapat dimuat secara dinamis yang dimuat dari pustaka runtime (yaitu objek bersama, pustaka yang ditautkan secara dinamis).
Dengan pluginlib, seseorang tidak perlu menautkan aplikasinya secara eksplisit ke pustaka yang berisi kelas -- sebagai gantinya, pluginlib dapat membuka pustaka yang berisi kelas yang diekspor kapan saja tanpa aplikasi memiliki kesadaran sebelumnya tentang pustaka atau file header yang berisi definisi kelas .
Plugin berguna untuk memperluas/memodifikasi perilaku aplikasi tanpa memerlukan kode sumber aplikasi.

Prasyarat
-------------

Tutorial ini mengasumsikan pengetahuan dasar C++ dan Anda telah menginstal ``pluginlib``.

.. blok kode :: konsol

   sudo apt-get install ros-{DISTRO}-pluginlib


Tugas
-----

Dalam tutorial ini, Anda akan membuat dua paket baru, satu yang mendefinisikan kelas dasar, dan satu lagi yang menyediakan plugin.
Kelas dasar akan menentukan kelas poligon umum, dan kemudian plugin kami akan menentukan bentuk tertentu.

1 Buat Paket Kelas Dasar
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Buat paket kosong baru di folder ``ros2_ws/src`` Anda dengan perintah berikut:

.. blok kode :: konsol

   ros2 pkg buat --build-type ament_cmake polygon_base --dependencies pluginlib --node-name area_node


Buka editor favorit Anda, edit ``ros2_ws/src/polygon_base/include/polygon_base/regular_polygon.hpp``, dan rekatkan kode berikut di dalamnya:

.. blok kode :: C++

     #ifndef POLYGON_BASE_REGULAR_POLYGON_HPP
     #menentukan POLYGON_BASE_REGULAR_POLYGON_HPP

     poligon_base namespace
     {
       kelas Poligon Reguler
       {
         publik:
           virtual void initialize(double side_length) = 0;
           luas ganda maya() = 0;
           virtual ~RegularPolygon(){}

         terlindung:
           Poligon beraturan(){}
       };
     } // ruang nama poligon_base

     #endif // POLYGON_BASE_REGULAR_POLYGON_HPP

Kode di atas seharusnya cukup jelas... kita membuat kelas abstrak bernama ``RegularPolygon``.
Satu hal yang perlu diperhatikan adalah adanya metode inisialisasi.
Dengan ``pluginlib``, konstruktor tanpa parameter diperlukan, jadi jika ada parameter ke kelas yang diperlukan, kami menggunakan metode inisialisasi untuk meneruskannya ke objek.

Kita perlu membuat header ini tersedia untuk kelas lain, jadi buka ``ros2_ws/src/polygon_base/CMakeLists.txt`` untuk mengedit.
Tambahkan baris berikut setelah perintah ``ament_target_dependencies``:

.. blok kode :: cmake

     Install(
       DIREKTORI termasuk/
       TUJUAN termasuk
     )

Dan tambahkan perintah ini sebelum perintah ``ament_package``:

.. blok kode :: cmake

     ament_export_include_directories(
       termasuk
     )

Kami akan kembali ke paket ini nanti untuk menulis node pengujian kami.

2 Buat Paket Plugin
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Sekarang kita akan menulis dua implementasi non-virtual dari kelas abstrak kita.
Buat paket kosong kedua di folder ``ros2_ws/src`` Anda dengan perintah berikut:

.. blok kode :: konsol

   ros2 pkg buat --build-type ament_cmake polygon_plugins --dependencies polygon_base pluginlib --nama perpustakaan polygon_plugins

2.1 Kode sumber untuk plugin
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Buka ``ros2_ws/src/polygon_plugins/src/polygon_plugins.cpp`` untuk mengedit, dan rekatkan kode berikut di dalamnya:

.. blok kode :: C++

     #sertakan <polygon_base/regular_polygon.hpp>
     #termasuk <cmath>

     polygon_plugins namespace
     {
       kelas Persegi : polygon_base publik::Polygon Reguler
       {
         publik:
           void initialize(double side_length) override
           {
             panjang_sisi_ = panjang_sisi;
           }

           double area() menimpa
           {
             kembali sisi_panjang_ * sisi_panjang_;
           }

         terlindung:
           sisi_panjang_ ganda;
       };

       kelas Segitiga : polygon_base publik::Polygon Reguler
       {
         publik:
           void initialize(double side_length) override
           {
             panjang_sisi_ = panjang_sisi;
           }

           double area() menimpa
           {
             return 0,5 * side_length_ * getHeight();
           }

           gandakan getHeight()
           {
             return sqrt((panjang_sisi_ *panjang_sisi_) - ((panjang_sisi_ / 2) * (panjang_sisi_ / 2)));
           }

         terlindung:
           sisi_panjang_ ganda;
       };
     }

     #sertakan <pluginlib/class_list_macros.hpp>

     PLUGINLIB_EXPORT_CLASS(poligon_plugins::Persegi, poli