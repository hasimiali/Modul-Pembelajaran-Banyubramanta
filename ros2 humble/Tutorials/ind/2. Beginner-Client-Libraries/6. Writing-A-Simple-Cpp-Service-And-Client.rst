.. _CppSrvCli:

Menulis layanan dan klien sederhana (C++)
=====================================

**Sasaran:** Membuat dan menjalankan layanan dan node klien menggunakan C++.

**Tingkat tutorial:** Pemula

**Waktu:** 20 menit

.. isi :: Isi
    :kedalaman: 2
    :lokal:

Latar belakang
----------

Ketika :doc:`nodes <../Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` berkomunikasi menggunakan :doc:`services <../Beginner-CLI-Tools/Understanding-ROS2- Services/Understanding-ROS2-Services>`, node yang mengirimkan permintaan data disebut node klien, dan yang merespons permintaan tersebut adalah node layanan.
Struktur permintaan dan respons ditentukan oleh file ``.srv``.

Contoh yang digunakan di sini adalah sistem penjumlahan bilangan bulat sederhana; satu node meminta jumlah dari dua bilangan bulat, dan yang lainnya merespons dengan hasilnya.


Prasyarat
-------------

Dalam tutorial sebelumnya, Anda telah mempelajari cara :doc:`membuat ruang kerja <./Creating-A-Workspace/Creating-A-Workspace>` dan :doc:`membuat paket <./Creating-Your-First-ROS2- Paket>`.

Tugas
-----

1 Buat paket
^^^^^^^^^^^^^^^^^^^^^^

Buka terminal baru dan :doc:`sumber instalasi ROS 2 Anda <../Beginner-CLI-Tools/Configuring-ROS2-Environment>` sehingga perintah ``ros2`` akan berfungsi.

Arahkan ke direktori ``ros2_ws`` yang dibuat di :ref:`tutorial sebelumnya <new-directory>`.

Ingatlah bahwa paket harus dibuat di direktori ``src``, bukan di root ruang kerja.
Arahkan ke ``ros2_ws/src`` dan buat paket baru:

.. blok kode :: konsol

   ros2 pkg buat --build-type ament_cmake cpp_srvcli --dependencies rclcpp example_interfaces

Terminal Anda akan mengembalikan pesan yang memverifikasi pembuatan paket Anda ``cpp_srvcli`` dan semua file dan folder yang diperlukan.

Argumen ``--dependencies`` akan secara otomatis menambahkan baris ketergantungan yang diperlukan ke ``package.xml`` dan ``CMakeLists.txt``.
``example_interfaces`` adalah paket yang menyertakan `file .srv <https://github.com/ros2/example_interfaces/blob/{REPOS_FILE_BRANCH}/srv/AddTwoInts.srv>`__ Anda perlu menyusun permintaan dan tanggapan:

.. blok kode :: konsol

     int64 a
     int64b
     ---
     jumlah int64

Dua baris pertama adalah parameter permintaan, dan di bawah tanda hubung adalah responsnya.

1.1 Perbarui ``package.xml``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Karena Anda menggunakan opsi ``--dependencies`` selama pembuatan paket, Anda tidak perlu menambahkan dependensi secara manual ke ``package.xml`` atau ``CMakeLists.txt``.

Namun, seperti biasa, pastikan untuk menambahkan deskripsi, nama dan email pengelola, serta informasi lisensi ke ``package.xml``.

.. blok kode :: xml

   <description>Tutorial server klien C++</description>
   <maintainer email="you@email.com">Nama Anda</maintainer>
   <lisensi>Lisensi Apache 2.0</lisensi>


2 Tulis simpul layanan
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Di dalam direktori ``ros2_ws/src/cpp_srvcli/src``, buat file baru bernama ``add_two_ints_server.cpp`` dan rekatkan kode berikut di dalamnya:

.. blok kode :: C++

       #sertakan "rclcpp/rclcpp.hpp"
       #sertakan "contoh_interfaces/srv/add_two_ints.hpp"

       #termasuk <memori>

       permintaan void add(const std::shared_ptr<example_interfaces::srv::AddTwoInts::Request>,
                 std::shared_ptr<example_interfaces::srv::AddTwoInts::Response> tanggapan)
       {
         respon->jumlah = permintaan->a + permintaan->b;
         RCLCPP_INFO(rclcpp::get_logger("rclcpp"), "Permintaan masuk\na: %ld" " b: %ld",
                       permintaan->a, permintaan->b);
         RCLCPP_INFO(rclcpp::get_logger("rclcpp"), "mengirim kembali respons: [%ld]", (long int)response->sum);
       }

       int main(int argc, char **argv)
       {
         rclcpp::init(argc, argv);

         std::shared_ptr<rclcpp::Node> node = rclcpp::Node::make_shared("add_two_ints_server");

         rclcpp::Layanan<example_interfaces::srv::AddTwoInts>::SharedPtr service =
           node->create_service<example_interfaces::srv::AddTwoInts>("add_two_ints", &add);

         RCLCPP_INFO(rclcpp::get_logger("rclcpp"), "Siap menambahkan dua int.");

         rclcpp::spin(simpul);
         rclcpp::shutdown();
       }

2.1 Periksa kodenya
~~~~~~~~~~~~~~~~~~~~~~

Dua pernyataan ``#include`` pertama adalah dependensi paket Anda.

Fungsi ``add`` menambahkan dua bilangan bulat dari permintaan dan memberikan jumlah ke respons, sambil memberi tahu konsol tentang statusnya menggunakan log.

.. blok kode :: C++

     permintaan void add(const std::shared_ptr<example_interfaces::srv::AddTwoInts::Request>,
              std::shared_ptr<example_interfaces::srv::AddTwoInts::Response> tanggapan)
     {
         respon->jumlah = permintaan->a + permintaan->b;
         RCLCPP_INFO(rclcpp::get_logger("rclcpp"), "Permintaan masuk\na: %ld" " b: %ld",
             permintaan->a, permintaan->b);
         RCLCPP_INFO(rclcpp::get_logger("rclcpp"), "mengirim kembali respons: [%ld]", (long int)response->jumlah);
     }

Fungsi ``main`` menyelesaikan hal berikut, baris demi baris:

* Menginisialisasi pustaka klien ROS 2 C++:

   .. blok kode :: C++

     R