.. redirect-dari::

     Tutorial/Menggunakan-Parameter-Dalam-Kelas-Python

.. _PythonParamNode:

Menggunakan parameter di kelas (Python)
====================================

**Sasaran:** Membuat dan menjalankan kelas dengan parameter ROS menggunakan Python.

**Tingkat tutorial:** Pemula

**Waktu:** 20 menit

.. isi :: Isi
    :kedalaman: 2
    :lokal:

Latar belakang
----------

Saat membuat :doc:`nodes <../Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` Anda sendiri terkadang Anda perlu menambahkan parameter yang dapat diatur dari file peluncuran.

Tutorial ini akan menunjukkan cara membuat parameter tersebut di kelas Python, dan cara mengaturnya di file peluncuran.

Prasyarat
-------------

Dalam tutorial sebelumnya, Anda telah mempelajari cara :doc:`membuat ruang kerja <./Creating-A-Workspace/Creating-A-Workspace>` dan :doc:`membuat paket <./Creating-Your-First-ROS2- Paket>`.
Anda juga telah mempelajari tentang :doc:`parameters <../Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters>` dan fungsinya dalam sistem ROS 2.

Tugas
-----

1 Buat paket
^^^^^^^^^^^^^^^^^^^^^^

Buka terminal baru dan :doc:`sumber instalasi ROS 2 Anda <../Beginner-CLI-Tools/Configuring-ROS2-Environment>` sehingga perintah ``ros2`` akan berfungsi.

Ikuti :ref:`instruksi ini <new-directory>` untuk membuat ruang kerja baru bernama ``ros2_ws``.

Ingatlah bahwa paket harus dibuat di direktori ``src``, bukan di root ruang kerja.
Arahkan ke ``ros2_ws/src`` dan buat paket baru:

.. blok kode :: konsol

   ros2 pkg buat --build-type ament_python python_parameters --dependencies rclpy

Terminal Anda akan mengembalikan pesan yang memverifikasi pembuatan paket Anda ``python_parameters`` dan semua file dan folder yang diperlukan.

Argumen ``--dependencies`` akan secara otomatis menambahkan baris ketergantungan yang diperlukan ke ``package.xml`` dan ``CMakeLists.txt``.

1.1 Perbarui ``package.xml``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Karena Anda menggunakan opsi ``--dependencies`` selama pembuatan paket, Anda tidak perlu menambahkan dependensi secara manual ke ``package.xml`` atau ``CMakeLists.txt``.

Namun, seperti biasa, pastikan untuk menambahkan deskripsi, nama dan email pengelola, serta informasi lisensi ke ``package.xml``.

.. blok kode :: xml

   <description>Tutorial parameter python</description>
   <maintainer email="you@email.com">Nama Anda</maintainer>
   <lisensi>Lisensi Apache 2.0</lisensi>

2 Tulis simpul Python
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Di dalam direktori ``ros2_ws/src/python_parameters/python_parameters``, buat file baru bernama ``python_parameters_node.py`` dan rekatkan kode berikut di dalamnya:

.. blok kode :: Python

     impor rclpy
     impor rclpy.node

     kelas MinimalParam(rclpy.node.Node):
         def __init__(diri sendiri):
             super().__init__('minimal_param_node')

             self.declare_parameter('parameter_saya', 'dunia')

             self.timer = self.create_timer(1, self.timer_callback)

         def timer_callback(self):
             my_param = self.get_parameter('my_parameter').get_parameter_value().string_value

             self.get_logger().info('Halo %s!' % my_param)

             my_new_param = rclpy.parameter.Parameter(
                 'parameter_saya',
                 rclpy.Parameter.Jenis.STRING,
                 'dunia'
             )
             all_new_parameters = [param_baru_saya]
             self.set_parameters(all_new_parameters)

     def utama():
         rclpy.init()
         simpul = MinimalParam()
         rclpy.spin(simpul)

     jika __nama__ == '__main__':
         utama()



2.1 Periksa kodenya
~~~~~~~~~~~~~~~~~~~~~~
Pernyataan ``import`` di atas digunakan untuk mengimpor dependensi paket.

Potongan kode selanjutnya membuat kelas dan konstruktor.
Baris ``self.declare_parameter('my_parameter', 'world')`` dari konstruktor membuat parameter dengan nama ``my_parameter`` dan nilai default ``world``.
Tipe parameter disimpulkan dari nilai default, jadi dalam hal ini akan diatur ke tipe string.
Selanjutnya ``timer`` diinisialisasi dengan periode 1, yang menyebabkan fungsi ``timer_callback`` dijalankan sekali dalam satu detik.

.. blok kode :: Python

     kelas MinimalParam(rclpy.node.Node):
         def __init__(diri sendiri):
             super().__init__('minimal_param_node')

             self.declare_parameter('parameter_saya', 'dunia')

             self.timer = self.create_timer(1, self.timer_callback)

Baris pertama dari fungsi ``timer_callback`` kita mendapatkan parameter ``my_parameter`` dari node, dan menyimpannya di ``my_param``.
Selanjutnya fungsi ``get_logger`` memastikan peristiwa dicatat.
Fungsi ``set_parameters`` kemudian menyetel parameter ``my_parameter`` kembali ke nilai string default ``world``.
Jika pengguna mengubah parameter secara eksternal, ini memastikannya selalu diatur ulang kembali ke aslinya.

.. blok kode :: Python

       def timer_callback(self):
           my_param = self.get_parameter('my_parameter').get_parameter_value().string_value

           self.get_logger().info('Halo %s!' %