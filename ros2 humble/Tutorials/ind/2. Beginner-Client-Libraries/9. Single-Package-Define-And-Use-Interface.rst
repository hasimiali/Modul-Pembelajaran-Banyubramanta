.. _SinglePkgInterface:

.. redirect-dari::

     Rosidl-Tutorial
     Tutorial/Paket-Tunggal-Menentukan-Dan-Menggunakan-Antarmuka

Menerapkan antarmuka khusus
==============================

**Sasaran:** Pelajari lebih lanjut cara mengimplementasikan antarmuka khusus di ROS 2.

**Tingkat tutorial:** Pemula

**Waktu:** 15 menit

.. isi :: Isi
    :kedalaman: 2
    :lokal:

Latar belakang
----------

Dalam :doc:`tutorial sebelumnya <./Custom-ROS2-Interfaces>`, Anda mempelajari cara membuat antarmuka pesan khusus dan srv.

Meskipun praktik terbaiknya adalah mendeklarasikan antarmuka dalam paket antarmuka khusus, terkadang mendeklarasikan, membuat, dan menggunakan semua antarmuka dalam satu paket dapat memudahkan.

Ingatlah bahwa antarmuka saat ini hanya dapat ditentukan dalam paket CMake.
Namun, dimungkinkan untuk memiliki pustaka dan node Python dalam paket CMake (menggunakan `ament_cmake_python <https://github.com/ament/ament_cmake/tree/{REPOS_FILE_BRANCH}/ament_cmake_python>`_), sehingga Anda dapat menentukan antarmuka dan Node python bersama dalam satu paket.
Kami akan menggunakan paket CMake dan simpul C++ di sini demi kesederhanaan.

Tutorial ini akan berfokus pada jenis antarmuka pesan, tetapi langkah-langkah di sini berlaku untuk semua jenis antarmuka.

Prasyarat
-------------

Kami menganggap Anda telah meninjau dasar-dasar dalam tutorial :doc:`./Custom-ROS2-Interfaces` sebelum mengerjakan yang ini.

Anda harus memiliki :doc:`ROS 2 terinstal <../../Installation>`, :doc:`workspace <./Creating-A-Workspace/Creating-A-Workspace>`, dan pemahaman tentang :doc :`membuat paket <./Creating-Your-First-ROS2-Package>`.

Seperti biasa, jangan lupa :doc:`source ROS 2 <../Beginner-CLI-Tools/Configuring-ROS2-Environment>` di setiap terminal baru yang Anda buka.

Tugas
-----

1 Buat paket
^^^^^^^^^^^^^^^^^^^^^^

Di direktori ``src`` ruang kerja Anda, buat paket ``more_interfaces`` dan buat direktori di dalamnya untuk file msg:

.. blok kode :: konsol

   ros2 pkg buat --build-type ament_cmake more_interfaces
   mkdir more_interfaces/msg

2 Buat file pesan
^^^^^^^^^^^^^^^^^^^^^^^

Di dalam ``more_interfaces/msg``, buat file baru ``AddressBook.msg``, dan tempelkan kode berikut untuk membuat pesan yang dimaksudkan untuk membawa informasi tentang seseorang:

::

    uint8 PHONE_TYPE_HOME=0
    uint8 PHONE_TYPE_WORK=1
    uint8 PHONE_TYPE_MOBILE=2

    string nama_pertama
    string nama_belakang
    string phone_number
    tipe_telepon uint8

Pesan ini terdiri dari bidang berikut:

* first_name: bertipe string
* last_name: bertipe string
* phone_number: bertipe string
* phone_type: bertipe uint8, dengan beberapa nilai konstanta bernama yang ditentukan

Perhatikan bahwa Anda dapat menyetel nilai default untuk bidang dalam definisi pesan.
Lihat :doc:`../../Concepts/Basic/About-Interfaces` untuk lebih banyak cara menyesuaikan antarmuka.

Selanjutnya, kita perlu memastikan bahwa file msg diubah menjadi kode sumber untuk C++, Python, dan bahasa lainnya.

2.1 Buat file pesan
~~~~~~~~~~~~~~~~~~~~~~

Buka ``package.xml`` dan tambahkan baris berikut:

.. blok kode :: xml

      <buildtool_depend>rosidl_default_generators</buildtool_depend>

      <exec_depend>rosidl_default_runtime</exec_depend>

      <member_of_group>rosidl_interface_packages</member_of_group>

Perhatikan bahwa pada waktu pembuatan, kita memerlukan ``rosidl_default_generators``, sedangkan pada waktu proses, kita hanya memerlukan ``rosidl_default_runtime``.

Buka ``CMakeLists.txt`` dan tambahkan baris berikut:

Temukan paket yang menghasilkan kode pesan dari file msg/srv:

.. blok kode :: cmake

    find_package(rosidl_default_generator DIPERLUKAN)

Deklarasikan daftar pesan yang ingin Anda hasilkan:

.. blok kode :: cmake

    atur (msg_files
      "msg/AddressBook.msg"
    )

Dengan menambahkan file .msg secara manual, kami memastikan bahwa CMake mengetahui kapan proyek harus dikonfigurasi ulang setelah Anda menambahkan file .msg lainnya.

Menghasilkan pesan:

.. blok kode :: cmake

    rosidl_generate_interfaces(${PROJECT_NAME}
      ${msg_files}
    )

Pastikan juga Anda mengekspor dependensi runtime pesan:

.. blok kode :: cmake

    ament_export_dependencies(rosidl_default_runtime)

Sekarang Anda siap membuat file sumber dari definisi pesan Anda.
Kami akan melewati langkah kompilasi untuk saat ini karena kami akan melakukan semuanya bersama-sama di bawah pada langkah 4.

2.2 (Ekstra) Atur banyak antarmuka
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. catatan::

   Anda dapat menggunakan ``set`` di ``CMakeLists.txt`` untuk membuat daftar semua antarmuka Anda dengan rapi:

   .. blok kode :: cmake

      atur (msg_files
        "pesan/Pesan1.pesan"
        "pesan/Pesan2.pesan"
        # dll
        )

      atur (srv_files
        "srv/Layanan1.srv"
        "srv/Layanan2.srv"
         # dll
        )

   Dan hasilkan semua daftar sekaligus seperti ini:

   .. blok kode :: cmake

      rosidl_generate_interfaces(${PROJECT_NAME}
        ${msg_files}
        ${srv_files}
      )


3 Gunakan antarmuka dari paket yang sama
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Sekarang kita bisa mulai menulis kode yang menggunakan pesan ini.

Di ``more_interfaces/src`` buat file bernama ``publish_address_book.cpp`` dan rekatkan kode berikut:

.. blok kode :: c++

   #termasuk <chrono>
   #termasuk <memori>

   #termasuk