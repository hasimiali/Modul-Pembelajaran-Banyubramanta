.. _CppPubSub:

Menulis penerbit dan pelanggan sederhana (C++)
===============================================

**Sasaran:** Membuat dan menjalankan node penerbit dan pelanggan menggunakan C++.

**Tingkat tutorial:** Pemula

**Waktu:** 20 menit

.. isi :: Isi
    :kedalaman: 2
    :lokal:

Latar belakang
----------

:doc:`Nodes <../Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` adalah proses yang dapat dieksekusi yang berkomunikasi melalui grafik ROS.
Dalam tutorial ini, node akan meneruskan informasi dalam bentuk pesan string satu sama lain melalui :doc:`topic <../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics>`.
Contoh yang digunakan di sini adalah sistem "pembicara" dan "pendengar" sederhana; satu node menerbitkan data dan yang lainnya berlangganan ke topik sehingga dapat menerima data tersebut.

Kode yang digunakan dalam contoh ini dapat ditemukan `di sini <https://github.com/ros2/examples/tree/{REPOS_FILE_BRANCH}/rclcpp/topics>`__.

Prasyarat
-------------

Dalam tutorial sebelumnya, Anda telah mempelajari cara :doc:`membuat ruang kerja <./Creating-A-Workspace/Creating-A-Workspace>` dan :doc:`membuat paket <./Creating-Your-First-ROS2- Paket>`.

Tugas
-----

1 Buat paket
^^^^^^^^^^^^^^^^^^^^^^

Buka terminal baru dan :doc:`sumber instalasi ROS 2 Anda <../Beginner-CLI-Tools/Configuring-ROS2-Environment>` sehingga perintah ``ros2`` akan berfungsi.

Arahkan ke direktori ``ros2_ws`` yang dibuat di :ref:`tutorial sebelumnya <new-directory>`.

Ingatlah bahwa paket harus dibuat di direktori ``src``, bukan di root ruang kerja.
Jadi, arahkan ke ``ros2_ws/src``, dan jalankan perintah pembuatan paket:

.. blok kode :: konsol

     ros2 pkg buat --build-type ament_cmake cpp_pubsub

Terminal Anda akan mengembalikan pesan yang memverifikasi pembuatan paket Anda ``cpp_pubsub`` dan semua file dan folder yang diperlukan.

Arahkan ke ``ros2_ws/src/cpp_pubsub/src``.
Ingatlah bahwa ini adalah direktori dalam paket CMake mana pun yang berisi file sumber yang dapat dieksekusi.


2 Tulis node penerbit
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Unduh contoh kode pembicara dengan memasukkan perintah berikut:

.. tab::

    .. grup-tab :: Linux

       .. blok kode :: konsol

             wget -O publisher_member_function.cpp https://raw.githubusercontent.com/ros2/examples/{REPOS_FILE_BRANCH}/rclcpp/topics/minimal_publisher/member_function.cpp

    .. grup-tab :: macOS

       .. blok kode :: konsol

             wget -O publisher_member_function.cpp https://raw.githubusercontent.com/ros2/examples/{REPOS_FILE_BRANCH}/rclcpp/topics/minimal_publisher/member_function.cpp

    .. grup-tab :: Windows

       Di prompt baris perintah Windows:

       .. blok kode :: konsol

             curl -sk https://raw.githubusercontent.com/ros2/examples/{REPOS_FILE_BRANCH}/rclcpp/topics/minimal_publisher/member_function.cpp -o publisher_member_function.cpp

       Atau di PowerShell:

       .. blok kode :: konsol

             curl https://raw.githubusercontent.com/ros2/examples/{REPOS_FILE_BRANCH}/rclcpp/topics/minimal_publisher/member_function.cpp -o publisher_member_function.cpp

Sekarang akan ada file baru bernama ``publisher_member_function.cpp``.
Buka file menggunakan editor teks pilihan Anda.

.. blok kode :: C++

     #termasuk <chrono>
     #termasuk <fungsional>
     #termasuk <memori>
     #sertakan <string>

     #sertakan "rclcpp/rclcpp.hpp"
     #sertakan "std_msgs/msg/string.hpp"

     menggunakan namespace std::chrono_literals;

     /* Contoh ini membuat subkelas dari Node dan menggunakan std::bind() untuk mendaftarkan a
     * member berfungsi sebagai callback dari timer. */

     kelas MinimalPublisher : publik rclcpp::Node
     {
       publik:
         MinimalPublisher()
         : Node("minimal_penerbit"), hitung_(0)
         {
           publisher_ = this->create_publisher<std_msgs::msg::String>("topik", 10);
           timer_ = ini->buat_wall_timer(
           500ms, std::bind(&MinimalPublisher::timer_callback, this));
         }

       pribadi:
         batal timer_callback()
         {
           pesan otomatis = std_msgs::msg::String();
           message.data = "Halo, dunia!" + std::to_string(count_++);
           RCLCPP_INFO(ini->get_logger(), "Penerbitan: '%s'", pesan.data.c_str());
           penerbit_->terbitkan(pesan);
         }
         rclcpp::TimerBase::SharedPtr timer_;
         rclcpp::Penerbit<std_msgs::msg::String>::SharedPtr publisher_;
         ukuran_t hitung_;
     };

     int main(int argc, char * argv[])
     {
       rclcpp::init(argc, argv);
       rclcpp::spin(std::make_shared<MinimalPublisher>());
       rclcpp::shutdown();
       kembali 0;
     }

2.1 Periksa kodenya
~~~~~~~~~~~~~~~~~~~~~~

Bagian atas kode menyertakan header C++ standar yang akan Anda gunakan.
Setelah header C++ standar adalah penyertaan ``rclcpp/rclcpp.hpp`` yang memungkinkan Anda untuk menggunakan bagian paling umum dari sistem ROS 2.
Terakhir adalah ``std_msgs/msg/string.hpp``, yang menyertakan jenis pesan bawaan yang akan Anda gunakan untuk menerbitkan data.

.. blok kode :: C++

     #termasuk <chrono>
     #termasuk <fungsional>
     #