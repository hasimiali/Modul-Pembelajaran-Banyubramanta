.. _PyPubSub:

Menulis penerbit dan pelanggan sederhana (Python)
==================================================

**Sasaran:** Membuat dan menjalankan node penerbit dan pelanggan menggunakan Python.

**Tingkat tutorial:** Pemula

**Waktu:** 20 menit

.. isi :: Isi
    :kedalaman: 2
    :lokal:

Latar belakang
----------

Dalam tutorial ini, Anda akan membuat :doc:`nodes <../Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` yang meneruskan informasi dalam bentuk pesan string satu sama lain melalui : doc:`topic <../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics>`.
Contoh yang digunakan di sini adalah sistem "pembicara" dan "pendengar" sederhana;
satu node menerbitkan data dan yang lainnya berlangganan ke topik sehingga dapat menerima data tersebut.

Kode yang digunakan dalam contoh ini dapat ditemukan `di sini <https://github.com/ros2/examples/tree/{REPOS_FILE_BRANCH}/rclpy/topics>`__.

Prasyarat
-------------

Dalam tutorial sebelumnya, Anda telah mempelajari cara :doc:`membuat ruang kerja <./Creating-A-Workspace/Creating-A-Workspace>` dan :doc:`membuat paket <./Creating-Your-First-ROS2- Paket>`.

Pemahaman dasar tentang Python direkomendasikan, tetapi tidak sepenuhnya diperlukan.

Tugas
-----

1 Buat paket
^^^^^^^^^^^^^^^^^^^^^^

Buka terminal baru dan :doc:`sumber instalasi ROS 2 Anda <../Beginner-CLI-Tools/Configuring-ROS2-Environment>` sehingga perintah ``ros2`` akan berfungsi.

Arahkan ke direktori ``ros2_ws`` yang dibuat di :ref:`tutorial sebelumnya <new-directory>`.

Ingatlah bahwa paket harus dibuat di direktori ``src``, bukan di root ruang kerja.
Jadi, arahkan ke ``ros2_ws/src``, dan jalankan perintah pembuatan paket:

.. blok kode :: konsol

   ros2 pkg buat --build-type ament_python py_pubsub

Terminal Anda akan mengembalikan pesan yang memverifikasi pembuatan paket Anda ``py_pubsub`` dan semua file dan folder yang diperlukan.

2 Tulis node penerbit
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Arahkan ke ``ros2_ws/src/py_pubsub/py_pubsub``.
Ingatlah bahwa direktori ini adalah `paket Python <https://docs.python.org/3/tutorial/modules.html#packages>`__ dengan nama yang sama dengan paket ROS 2 yang menjadi sarangnya.

Unduh contoh kode pembicara dengan memasukkan perintah berikut:

.. blok kode :: konsol

   wget https://raw.githubusercontent.com/ros2/examples/{REPOS_FILE_BRANCH}/rclpy/topics/minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py

Sekarang akan ada file baru bernama ``publisher_member_function.py`` berdekatan dengan ``__init__.py``.

Buka file menggunakan editor teks pilihan Anda.

.. blok kode :: python

   impor rclpy
   dari rclpy.node impor Node

   dari std_msgs.msg impor String


   kelas MinimalPublisher(Node):

       def __init__(diri sendiri):
           super().__init__('minimal_publisher')
           self.publisher_ = self.create_publisher(String, 'topik', 10)
           timer_period = 0,5 # detik
           self.timer = self.create_timer(timer_period, self.timer_callback)
           diri.i = 0

       def timer_callback(self):
           pesan = String()
           msg.data = 'Halo Dunia: %d' % self.i
           self.publisher_.publish(msg)
           self.get_logger().info('Penerbitan: "%s"' % msg.data)
           self.i += 1


   def main(args=Tidak ada):
       rclpy.init(args=args)

       minimal_publisher = MinimalPublisher()

       rclpy.spin(minimal_publisher)

       # Hancurkan node secara eksplisit
       # (opsional - jika tidak maka akan dilakukan secara otomatis
       # ketika pengumpul sampah menghancurkan objek simpul)
       minimal_publisher.destroy_node()
       rclpy.shutdown()


   jika __nama__ == '__main__':
       utama()


2.1 Periksa kodenya
~~~~~~~~~~~~~~~~~~~~~~

Baris kode pertama setelah komentar mengimpor ``rclpy`` sehingga kelas ``Node`` dapat digunakan.

.. blok kode :: python

   impor rclpy
   dari rclpy.node impor Node

Pernyataan selanjutnya mengimpor tipe pesan string bawaan yang digunakan node untuk menyusun data yang diteruskannya pada topik.

.. blok kode :: python

   dari std_msgs.msg impor String

Garis-garis ini mewakili dependensi node.
Ingatlah bahwa dependensi harus ditambahkan ke ``package.xml``, yang akan Anda lakukan di bagian selanjutnya.

Berikutnya, kelas ``MinimalPublisher`` dibuat, yang mewarisi dari (atau merupakan subkelas dari) ``Node``.

.. blok kode :: python

   kelas MinimalPublisher(Node):

Berikut adalah definisi konstruktor kelas.
``super().__init__`` memanggil konstruktor kelas ``Node`` dan memberinya nama node Anda, dalam hal ini ``minimal_publisher``.

``create_publisher`` mendeklarasikan bahwa node menerbitkan pesan bertipe ``String`` (diimpor dari modul ``std_msgs.msg``), melalui topik bernama ``topic``, dan bahwa "ukuran antrean" adalah 10.
Ukuran antrean adalah pengaturan QoS (kualitas layanan) yang diperlukan yang membatasi jumlah pesan antrean jika pelanggan tidak menerimanya dengan cukup cepat.

Selanjutnya, pengatur waktu dibuat dengan panggilan balik untuk dijalankan setiap 0,5 detik.
``self.i`` adalah penghitung yang digunakan dalam panggilan balik.

.. blok kode :: python

   def __init__(diri sendiri):
       super().__