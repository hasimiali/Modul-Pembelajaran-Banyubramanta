.. redirect-dari::

     Tutorial/Menulis-A-Simple-Py-Service-And-Client

.. _PySrvCli:

Menulis layanan dan klien sederhana (Python)
========================================

**Sasaran:** Membuat dan menjalankan layanan dan node klien menggunakan Python.

**Tingkat tutorial:** Pemula

**Waktu:** 20 menit

.. isi :: Isi
    :kedalaman: 2
    :lokal:

Latar belakang
----------

Ketika :doc:`nodes <../Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes>` berkomunikasi menggunakan :doc:`services <../Beginner-CLI-Tools/Understanding-ROS2- Services/Understanding-ROS2-Services>`, node yang mengirimkan permintaan data disebut node klien, dan yang merespons permintaan tersebut adalah node layanan.
Struktur permintaan dan respons ditentukan oleh file ``.srv``.

Contoh yang digunakan di sini adalah sistem penjumlahan bilangan bulat sederhana; satu node meminta jumlah dari dua bilangan bulat, dan yang lainnya merespons dengan hasilnya.

Prasyarat
-------------

Dalam tutorial sebelumnya, Anda telah mempelajari cara :doc:`membuat ruang kerja <./Creating-A-Workspace/Creating-A-Workspace>` dan :doc:`membuat paket <./Creating-Your-First-ROS2- Paket>`.

Tugas
-----

1 Buat paket
^^^^^^^^^^^^^^^^^^^^^^

Buka terminal baru dan :doc:`sumber instalasi ROS 2 Anda <../Beginner-CLI-Tools/Configuring-ROS2-Environment>` sehingga perintah ``ros2`` akan berfungsi.

Arahkan ke direktori ``ros2_ws`` yang dibuat di :ref:`tutorial sebelumnya <new-directory>`.

Ingatlah bahwa paket harus dibuat di direktori ``src``, bukan di root ruang kerja.
Arahkan ke ``ros2_ws/src`` dan buat paket baru:

.. blok kode :: konsol

   ros2 pkg buat --build-type ament_python py_srvcli --dependencies rclpy example_interfaces

Terminal Anda akan mengembalikan pesan yang memverifikasi pembuatan paket Anda ``py_srvcli`` dan semua file dan folder yang diperlukan.

Argumen ``--dependencies`` akan secara otomatis menambahkan baris ketergantungan yang diperlukan ke ``package.xml``.
``example_interfaces`` adalah paket yang menyertakan `file .srv <https://github.com/ros2/example_interfaces/blob/{REPOS_FILE_BRANCH}/srv/AddTwoInts.srv>`__ Anda perlu menyusun permintaan dan tanggapan:

.. blok kode :: konsol

     int64 a
     int64b
     ---
     jumlah int64

Dua baris pertama adalah parameter permintaan, dan di bawah tanda hubung adalah responsnya.

1.1 Perbarui ``package.xml``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Karena Anda menggunakan opsi ``--dependencies`` selama pembuatan paket, Anda tidak perlu menambahkan dependensi secara manual ke ``package.xml``.

Namun, seperti biasa, pastikan untuk menambahkan deskripsi, nama dan email pengelola, serta informasi lisensi ke ``package.xml``.

.. blok kode :: xml

   <description>Tutorial server klien Python</description>
   <maintainer email="you@email.com">Nama Anda</maintainer>
   <lisensi>Lisensi Apache 2.0</lisensi>

1.2 Perbarui ``setup.py``
~~~~~~~~~~~~~~~~~~~~~~~~~

Tambahkan informasi yang sama ke file ``setup.py`` untuk kolom ``maintainer``, ``maintainer_email``, ``description`` dan ``license``:

.. blok kode :: python

     pengelola='Nama Anda',
     pengelola_email='anda@email.com',
     description='tutorial server klien python',
     lisensi='Lisensi Apache 2.0',

2 Tulis simpul layanan
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Di dalam direktori ``ros2_ws/src/py_srvcli/py_srvcli``, buat file baru bernama ``service_member_function.py`` dan tempel kode berikut di dalamnya:

.. blok kode :: python

   dari example_interfaces.srv impor AddTwoInts

   impor rclpy
   dari rclpy.node impor Node


   kelas Layanan Minimal (Node):

       def __init__(diri sendiri):
           super().__init__('minimal_service')
           self.srv = self.create_service(AddTwoInts, 'add_two_ints', self.add_two_ints_callback)

       def add_two_ints_callback(self, request, response):
           respon.jumlah = permintaan.a + permintaan.b
           self.get_logger().info('Permintaan masuk\na: %d b: %d' % (permintaan.a, permintaan.b))

           respon balik


   def utama():
       rclpy.init()

       minimal_service = Layanan Minimal()

       rclpy.spin(layanan_minimal)

       rclpy.shutdown()


   jika __nama__ == '__main__':
       utama()

2.1 Periksa kodenya
~~~~~~~~~~~~~~~~~~~~~~

Pernyataan ``import`` pertama mengimpor jenis layanan ``AddTwoInts`` dari paket ``example_interfaces``.
Pernyataan ``import`` berikut mengimpor pustaka klien ROS 2 Python, dan khususnya kelas ``Node``.

.. blok kode :: python

   dari example_interfaces.srv impor AddTwoInts

   impor rclpy
   dari rclpy.node impor Node

Konstruktor kelas ``MinimalService`` menginisialisasi node dengan nama ``minimal_service``.
Kemudian, ia membuat layanan dan menentukan jenis, nama, dan panggilan balik.

.. blok kode :: python

   def __init__(diri sendiri):
       super().__init__('minimal_service')
       self.srv = self.create_service(AddTwoInts, 'add_two_ints', self.add_two_ints_callback)

Definisi callback layanan menerima data permintaan, menjumlahkannya, dan mengembalikan jumlah tersebut sebagai respons.

.. blok kode :: python

   def add_two_int